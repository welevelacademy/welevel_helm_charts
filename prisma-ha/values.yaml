# ------------------------------------------------------------------------------
# Prisma:
# ------------------------------------------------------------------------------

# How many pods should be running (default 2)
# Keep in synk with autoscaling.minReplicas if you need pdb.
replicaCount: 2

# The docker image to be installed in this chart/pod
image:
  ## Prisma image repository
  ##
  repository: welevelacademy/prisma-prod

  ## Prisma image version
  ##    
  tag: 1.34.10
  
  ## Specify an imagePullPolicy
  ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  ##  
  pullPolicy: IfNotPresent

serviceAccount:
  ## Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  ## Define serviceAccount name. Defaults to fully qualified name or "default"
  ## when create is false
  ##
  name: ""

database:
  ## The current supported connectors are [mysql, postgres]
  connector: postgres

  ## If 'postgresql.enabled' is 'false', you will need to provide the
  ## following values so that Prisma can use them as the database endpoint
  host: ""
  port: ""

  ## Database name where model will be created
  ##
  name: prisma
  
  ## Database schema for the model will be created (Used only on PostgreSQL)
  ##
  schema: public

  ## Enable SSL
  ##
  ssl: false

  ## The maximum number of database connections (must be at least 2).
  ##
  connectionLimit: 2

  ## Database credentials
  ##
  user: prisma
  password: ""

  ## Enable database migrations
  ##
  migrations: true
  
  ## Enable database raw query access
  ##
  raw: false

messaging:
  ## Prisma's Messages PubSub
  ##
  enabled: false
  ## The uri for RabbitMQ
  rabbitUri: ""
  
api:
  ## Prisma's Management API
  ##
  enabled: false
  ## Prisma's Management API authentication
  ##
  auth: false  
  ## Secret to use. If it isn't specified and 'api.auth' is set to 'true',
  ## a random generated one will be used
  ##
  # secret: ""  

service:
  type: ClusterIP
  port: 80
  
ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  path: /
  hosts: []
    # - prisma.local
  tls: []
  #  - secretName: prisma-tls
  #    hosts:
  #      - prisma.local

resources: {}
#  limits:
#    cpu: 100m
#    memory: 4Gi
#  requests:
#    cpu: 100m
#    memory: 1Gi

autoscaling:
  enabled: false
  minReplicas: 2
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80
  
## Node labels for pod assignment
## ref: https://kubernetes.io/docs/user-guide/node-selection/
##
nodeSelector: {}

## Tolerations for pod assignment
## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
##
tolerations: []

## Affinity for pod assignment
## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
##
affinity: {}

## PodDisruptionBudget for pod concurrent disruptions
## ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/#specifying-a-poddisruptionbudget
##
podDisruptionBudget: {}
  # maxUnavailable: 1
  # minAvailable: 1

# ------------------------------------------------------------------------------
# RabbitMQ:
# ------------------------------------------------------------------------------

rabbitmq:
  ## If true, install the RabbitMQ chart alongside Prisma
  enabled: true
  
  ## RabbitMQ image version
  ## ref: https://hub.docker.com/r/bitnami/rabbitmq/tags/
  ##
  imageTag: "3.8.3"
  
  ## Specify a RabbitMQ imagePullPolicy
  ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  ##
  pullPolicy: IfNotPresent
  
  ## Replica count, set to 2 to provide a default HA cluster
  replicas: 2

  ## does your cluster have rbac enabled? assume yes by default  
  rbacEnabled: true

  ## section of specific values for rabbitmq
  rabbitmq:  
    ## RabbitMQ application username
    ## ref: https://github.com/bitnami/bitnami-docker-rabbitmq#environment-variables
    ##
    username: user

    ## RabbitMQ application password
    ## ref: https://github.com/bitnami/bitnami-docker-rabbitmq#environment-variables
    ##
    # password:
    # existingPasswordSecret: name-of-existing-secret

    ## Erlang cookie to determine whether different nodes are allowed to communicate with each other
    ## ref: https://github.com/bitnami/bitnami-docker-rabbitmq#environment-variables
    ##
    # erlangCookie:
    # existingErlangSecret: name-of-existing-secret
    
    ## Disk free space limit of the partition on which RabbitMQ is storing data
    ## ref: https://github.com/bitnami/bitnami-docker-rabbitmq#environment-variables
    ##    
    diskFreeLimit: '"6GiB"'
    
  service:
    type: ClusterIP
    ## Node port
    ## ref: https://github.com/bitnami/bitnami-docker-rabbitmq#environment-variables
    ##
    # nodePort: 30672

    ## Set the LoadBalancerIP
    ##
    # loadBalancerIP:

    ## Node port Tls
    ##
    # nodeTlsPort: 30671

    ## Amqp port
    ## ref: https://github.com/bitnami/bitnami-docker-rabbitmq#environment-variables
    ##
    port: 5672

    ## Amqp Tls port
    ##
    tlsPort: 5671

    ## Dist port
    ## ref: https://github.com/bitnami/bitnami-docker-rabbitmq#environment-variables
    ##
    distPort: 25672

    ## RabbitMQ Manager port
    ## ref: https://github.com/bitnami/bitnami-docker-rabbitmq#environment-variables
    ##
    managerPort: 15672

  persistence:
    ## this enables PVC templates that will create one per pod  
    enabled: true

    ## rabbitmq data Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    # storageClass: "-"
    ## selector can be used to match an existing PersistentVolume
    # selector:
    #   matchLabels:
    #     app: my-app
    accessMode: ReadWriteOnce

    # If you change this value, you might have to adjust `rabbitmq.diskFreeLimit` as well.
    size: 8Gi

  ## Configure resource requests and limits
  ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ##
  resources:
    requests:
      memory: 512Mi
      cpu: 100m

  ## Configure the ingress resource that allows you to access the
  ## Wordpress installation. Set up the URL
  ## ref: http://kubernetes.io/docs/user-guide/ingress/
  ##
  ingress:
    ## Set to true to enable ingress record generation
    enabled: false

    #The following settings are to configure the frequency of the lifeness and readiness probes
  livenessProbe:
    enabled: true
    initialDelaySeconds: 120
    timeoutSeconds: 5
    failureThreshold: 6

  readinessProbe:
    enabled: true
    initialDelaySeconds: 10
    timeoutSeconds: 3
    periodSeconds: 5
    
# ------------------------------------------------------------------------------
# PostgreSQL:
# ------------------------------------------------------------------------------

postgresql:
  ## If true, install the PostgreSQL chart alongside Prisma
  ## ref: https://github.com/kubernetes/charts/tree/master/stable/postgresql
  ##
  enabled: false

  ## PostgresSQL image version
  ## ref: https://hub.docker.com/r/library/postgres/tags/
  ##
  imageTag: "9.6.2"

  ## Specify a PostgreSQL imagePullPolicy
  ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  ##
  imagePullPolicy: "IfNotPresent"

  ## Persist data to a persistent volume
  ##
  persistence:
    enabled: false

  ## PostgreSQL credentials
  ##
  postgresqlUsername: prisma
  postgresqlPassword: ""
  postgresqlDatabase: prisma

  ## PostgreSQL service TCP port
  ##
  service:
    port: 5432

  ## Configure PostgreSQL resource requests and limits
  ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ##
  resources: {}    