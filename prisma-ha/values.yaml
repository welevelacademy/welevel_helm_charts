# ------------------------------------------------------------------------------
# Prisma:
# ------------------------------------------------------------------------------

# How many pods should be running (default 2)
# Keep in synk with autoscaling.minReplicas if you need pdb.
replicaCount: 2

# The docker image to be installed in this chart/pod
image:
  ## Prisma image repository
  ##
  repository: welevelacademy/prisma-prod

  ## Prisma image version
  ##
  tag: 1.34.10

  ## Specify an imagePullPolicy
  ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  ##
  pullPolicy: IfNotPresent

serviceAccount:
  ## Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  ## Define serviceAccount name. Defaults to fully qualified name or "default"
  ## when create is false
  ##
  name: ""

database:
  ## The current supported connectors are [mysql, postgres]
  connector: postgres

  ## If 'postgresql.enabled' is 'false', you will need to provide the
  ## following values so that Prisma can use them as the database endpoint
  host: ""
  port: ""

  ## Database name where model will be created
  ##
  name: prisma

  ## Database schema for the model will be created (Used only on PostgreSQL)
  ##
  schema: public

  ## Enable SSL
  ##
  ssl: false

  ## The maximum number of database connections (must be at least 2).
  ##
  connectionLimit: 2

  ## Database credentials
  ##
  user: prisma
  password: ""

  ## Enable database migrations
  ##
  migrations: true

  ## Enable database raw query access
  ##
  raw: false

messaging:
  ## Prisma's Messages PubSub
  ##
  enabled: false
  ## The uri for RabbitMQ
  rabbitUri: ""

api:
  ## Prisma's Management API
  ##
  enabled: false
  ## Prisma's Management API authentication
  ##
  auth: false
  ## Secret to use. If it isn't specified and 'api.auth' is set to 'true',
  ## a random generated one will be used
  ##
  # secret: ""

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  path: /
  hosts:
    []
    # - prisma.local
  tls: []
  #  - secretName: prisma-tls
  #    hosts:
  #      - prisma.local

resources: {}
#  limits:
#    cpu: 100m
#    memory: 4Gi
#  requests:
#    cpu: 100m
#    memory: 1Gi

autoscaling:
  enabled: false
  minReplicas: 2
  maxReplicas: 100
  targetCPU: 80
  # targetMemory: 80

## Node labels for pod assignment
## ref: https://kubernetes.io/docs/user-guide/node-selection/
##
nodeSelector: {}

## Tolerations for pod assignment
## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
##
tolerations: []

## Affinity for pod assignment
## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
##
affinity: {}

## PodDisruptionBudget for pod concurrent disruptions
## ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/#specifying-a-poddisruptionbudget
##
podDisruptionBudget:
  {}
  # maxUnavailable: 1
  # minAvailable: 1

# ------------------------------------------------------------------------------
# RabbitMQ:
# ------------------------------------------------------------------------------

rabbitmq:
  ## If true, install the RabbitMQ chart alongside Prisma
  ## ref: https://github.com/bitnami/charts/blob/master/bitnami/rabbitmq
  ##
  enabled: true

  replicaCount: 2

  ## Bitnami RabbitMQ image version
  ##
  image:
    registry: docker.io
    repository: bitnami/rabbitmq
    tag: 3.11.0-debian-11-r1
    digest: ""
    ## set to true if you would like to see extra information on logs
    ## It turns BASH and/or NAMI debugging in the image
    ##
    debug: false
    ## Specify a imagePullPolicy
    ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
    ## ref: https://kubernetes.io/docs/user-guide/images/#pre-pulling-images
    ##
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ## Example:
    ## pullSecrets:
    ##   - myRegistryKeySecretName
    ##
    pullSecrets: []

  ## RabbitMQ Authentication parameters
  ##
  auth:
    ## @param auth.username RabbitMQ application username
    ## ref: https://github.com/bitnami/containers/tree/main/bitnami/rabbitmq#environment-variables
    ##
    username: user
    ## @param auth.password RabbitMQ application password
    ## ref: https://github.com/bitnami/containers/tree/main/bitnami/rabbitmq#environment-variables
    ##
    password: ""
    ## @param auth.existingPasswordSecret Existing secret with RabbitMQ credentials (must contain a value for `rabbitmq-password` key)
    ## e.g:
    ## existingPasswordSecret: name-of-existing-secret
    ##
    existingPasswordSecret: ""
    ## @param auth.erlangCookie Erlang cookie to determine whether different nodes are allowed to communicate with each other
    ## ref: https://github.com/bitnami/containers/tree/main/bitnami/rabbitmq#environment-variables
    ##
    erlangCookie: ""
    ## @param auth.existingErlangSecret Existing secret with RabbitMQ Erlang cookie (must contain a value for `rabbitmq-erlang-cookie` key)
    ## e.g:
    ## existingErlangSecret: name-of-existing-secret
    ##
    existingErlangSecret: ""

  ## Role Based Access
  ## ref: https://kubernetes.io/docs/admin/authorization/rbac/
  ##
  rbac:
    ## @param rbac.create Whether RBAC rules should be created
    ## binding RabbitMQ ServiceAccount to a role
    ## that allows RabbitMQ pods querying the K8s API
    ##
    create: true

# ------------------------------------------------------------------------------
# PostgreSQL:
# ------------------------------------------------------------------------------

postgresql:
  ## If true, install the PostgreSQL chart alongside Prisma
  ## ref: https://github.com/bitnami/charts/blob/master/bitnami/postgresql
  ##
  enabled: false

  ## Bitnami PostgreSQL image version
  ##
  image:
    registry: docker.io
    repository: bitnami/postgresql
    tag: 14.5.0-debian-11-r24
    digest: ""
    ## Specify a imagePullPolicy
    ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
    ## ref: https://kubernetes.io/docs/user-guide/images/#pre-pulling-images
    ##
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ## Example:
    ## pullSecrets:
    ##   - myRegistryKeySecretName
    ##
    pullSecrets: []
    ## Set to true if you would like to see extra information on logs
    ##
    debug: false

  ## Authentication parameters
  ##
  auth:
    ## @param auth.enablePostgresUser Assign a password to the "postgres" admin user. Otherwise, remote access will be blocked for this user
    ##
    enablePostgresUser: true
    ## @param auth.postgresPassword Password for the "postgres" admin user. Ignored if `auth.existingSecret` with key `postgres-password` is provided
    ##
    postgresPassword: ""
    ## @param auth.username Name for a custom user to create
    ##
    username: "prisma"
    ## @param auth.password Password for the custom user to create. Ignored if `auth.existingSecret` with key `password` is provided
    ##
    password: ""
    ## @param auth.database Name for a custom database to create
    ##
    database: "prisma"

  ## Persist data to a persistent volume
  ##
  persistence:
    enabled: false
